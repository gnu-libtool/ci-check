# A GitHub Actions workflow that builds a package on many platforms.

# Copyright (C) 2024 Free Software Foundation, Inc.
#
# This file is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# This file is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Reference documentation for this file:
# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
#
# Syntax of multiline strings in YAML: https://yaml-multiline.info/
#
# To execute this workflow, specify "[macos]" at the start of the head
# commit message that is pushed. For example:
#   git commit -m "[macos] Test patch"
#
# Customization:
# - Review and adapt the part of this file before the 'jobs:' line.
# - You can disable a particular job by adding a line
#     if: ${{ false }}
# - You can disable a particular matrix value for a particular job by adding an
#   'exclude' element to the 'matrix' element, such as:
#        exclude:
#          - bitness: 64
# - You can execute pre-release testing by specifying "[pre-release]" anywhere
#   in the head commit message that is pushed. For example:
#     git commit -m "[macos] [pre-release] Test patch"
#     - NOTE: By default, all OS-specific logs are not uploaded for download
#       when executing pre-release testing. To enable, update the following:
#         if: ${{ !contains(github.event.head_commit.message, '[pre-release]') }}
#       To this:
#         if: ${{ always() }}

name: macOS 12-14 make check

on:
  push:
  workflow_dispatch:

# Variables.
env:
  package: libtool
  branch: development

jobs:
  build-tarball:
    if: ${{ startsWith(github.event.head_commit.message, '[macos]') }}
    runs-on: ubuntu-22.04
    steps:
      # This is needed because we run a script stored in this repository.
      - uses: actions/checkout@v4
      - run: uname -a
      - run: id
      - run: env | LC_ALL=C sort
      - run: pwd
      # Install Ubuntu packages.
      # List of packages: https://packages.ubuntu.com/
      - run: sudo apt update; sudo apt install help2man texlive-base texlive-latex-base
      - run: |
          ./build-dev-tarball.sh '${{ env.package }}' '${{ env.branch }}' '${{ github.event.head_commit.message }}'
      # Doc: https://github.com/actions/upload-artifact?tab=readme-ov-file#usage
      - if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: logs-build-tarball-failed
          path: |
            ${{ env.package }}/config.cache
            ${{ env.package }}/config.log
            ${{ env.package }}/config.status
            ${{ env.package }}/log[1234]
            ${{ env.package }}/tests/testsuite.dir/*/testsuite.log
          retention-days: 3
          overwrite: true
      # Doc: https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts
      #      https://github.com/actions/upload-artifact?tab=readme-ov-file#usage
      - uses: actions/upload-artifact@v4
        with:
          name: tarball
          path: ${{ env.package }}/${{ env.package }}-*.tar.gz
          if-no-files-found: error
          retention-days: 3
          compression-level: 0
          overwrite: true
  # We can run max. 20 "make check" jobs in parallel, max. 5 of them being on macOS.
  # See https://docs.github.com/en/actions/learn-github-actions/usage-limits-billing-and-administration
  check-macos:
    name: make check on macOS
    needs: build-tarball
    # Doc: https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs
    strategy:
      fail-fast: false
      matrix:
        os: [macos-12, macos-13, macos-14]
    runs-on: ${{ matrix.os }}
    steps:
      # This is needed because we run a script stored in this repository.
      - uses: actions/checkout@v4
      # Download the artifact to $GITHUB_WORKSPACE.
      # Doc: https://github.com/actions/download-artifact?tab=readme-ov-file#usage
      - uses: actions/download-artifact@v4
        with:
          name: tarball
      - run: uname -a
      - run: id
      - run: env | LC_ALL=C sort
      - run: pwd
      # Install Homebrew packages.
      # List of packages: https://formulae.brew.sh/
      - run: brew install m4 automake gfortran
      # m4 is now installed in ${HOMEBREW_PREFIX-/usr/local}/opt/m4/bin/m4.
      # automake is now installed in /usr/local/bin/automake = ${HOMEBREW_PREFIX-/usr/local}/opt/automake/bin/automake.
      # gfortran is now installed in ${HOMEBREW_PREFIX-/usr/local}/opt/gfortran/bin/gfortran = ${HOMEBREW_PREFIX-/usr/local}/opt/gcc/bin/gfortran.
      # (HOMEBREW_PREFIX is currently /opt/homebrew on the macOS 14/arm64 machines, and undefined on the older machines.)
      - run: |
          PATH=${HOMEBREW_PREFIX-/usr/local}/opt/m4/bin:${HOMEBREW_PREFIX-/usr/local}/opt/gcc/bin:/usr/local/bin:$PATH
          : "Set M4 environment variable, in order to ignore the broken 'gm4' that is also found in PATH."
          export M4=m4
          pwd
          export CPPFLAGS="-Wall"
          ./build-on.sh '${{ env.package }}' '' 'make' '${{ github.event.head_commit.message }}'
      - if: ${{ !contains(github.event.head_commit.message, '[pre-release]') }}
        run: tar czf ${{ env.package }}-build.tar.gz ${{ env.package }}-*/
      # Doc: https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts
      #      https://github.com/actions/upload-artifact?tab=readme-ov-file#usage
      - if: ${{ !contains(github.event.head_commit.message, '[pre-release]') }}
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ matrix.os }}
          path: ${{ env.package }}-build.tar.gz
          if-no-files-found: error
          retention-days: 3
          compression-level: 0
          overwrite: true
