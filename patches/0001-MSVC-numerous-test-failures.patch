From c170c41062518a5f5f0c4c16feda6cdc07010c75 Mon Sep 17 00:00:00 2001
From: Ileana Dumitrescu <ileanadumitrescu95@gmail.com>
Date: Wed, 11 Dec 2024 18:43:47 +0200
Subject: [PATCH] MSVC: numerous test failures

---
diff --git a/libtoolize.in b/libtoolize.in
index 6c15aa57..c70b0b8e 100644
--- a/libtoolize.in
+++ b/libtoolize.in
@@ -437,6 +437,23 @@ func_copy ()
     else
       my_copycmd=$LN_S
       my_copy_type=linking
+
+      # The Windows linker, mklink, swaps link_name and target.
+      case $my_copycmd in
+      *mklink*)
+        my_temp=$my_destfile
+        my_destfile=$my_srcfile
+        my_srcfile=$my_temp
+
+        my_destfile=`cygpath -aw "$my_destfile"`
+        my_srcfile=`cygpath -aw "$my_srcfile"`
+
+        if test -d "$my_destfile"; then
+          my_copycmd="$my_copycmd /d"
+        fi
+      ;;
+      *) ;;
+      esac
     fi
     my_copy_msg="$my_copy_type file '$my_destfile'"
     $opt_verbose && my_copy_msg="$my_copycmd $my_srcfile $my_destdir"
diff --git a/m4/libtool.m4 b/m4/libtool.m4
index f220c667..08de1616 100644
--- a/m4/libtool.m4
+++ b/m4/libtool.m4
@@ -6812,14 +6812,14 @@ if test yes != "$_lt_caught_CXX_error"; then
 	  # Tell ltmain to make .dll files, not .so files.
 	  shrext_cmds=.dll
 	  # FIXME: Setting linknames here is a bad hack.
-	  _LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-DLL,-IMPLIB:"$tool_output_objdir$libname.dll.lib"~linknames='
+	  _LT_TAGVAR(archive_cmds, $1)='$CC -Fe$output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-DLL,-IMPLIB:"$tool_output_objdir$libname.dll.lib"~linknames='
 	  _LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then
               cp "$export_symbols" "$output_objdir/$soname.def";
               echo "$tool_output_objdir$soname.def" > "$output_objdir/$soname.exp";
             else
               $SED -e '\''s/^/-link -EXPORT:/'\'' < $export_symbols > $output_objdir/$soname.exp;
             fi~
-            $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs "@$tool_output_objdir$soname.exp" -Wl,-DLL,-IMPLIB:"$tool_output_objdir$libname.dll.lib"~
+            $CC -Fe$tool_output_objdir$soname $libobjs $compiler_flags $deplibs "@$tool_output_objdir$soname.exp" -Wl,-DLL,-IMPLIB:"$tool_output_objdir$libname.dll.lib"~
             linknames='
 	  # The linker will not automatically build a static lib if we build a DLL.
 	  # _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'
diff --git a/tests/demo.at b/tests/demo.at
index a506a93e..eb97fc24 100644
--- a/tests/demo.at
+++ b/tests/demo.at
@@ -152,7 +152,7 @@ AT_DATA([foo.h],
 #  endif
 #endif
 
-#if (defined _WIN32 || defined _WIN32_WCE) && !defined __GNUC__
+#if (defined _WIN32 || defined _WIN32_WCE || __CYGWIN__) && !defined __GNUC__
 # ifdef BUILDING_LIBHELLO
 #  ifdef DLL_EXPORT
 #   define LIBHELLO_SCOPE extern __declspec (dllexport)
diff --git a/tests/f77demo.at b/tests/f77demo.at
index 6b96920a..07a619e6 100644
--- a/tests/f77demo.at
+++ b/tests/f77demo.at
@@ -300,6 +300,9 @@ then
   AT_CHECK([echo "$LDFLAGS" | $EGREP 'fsanitize=' && (exit 77)], 1)
 fi
 
+# Skip Fortran tests for MSVC toolchain
+AT_CHECK([$LIBTOOL --config | $EGREP '^nm_interface="MS dumpbin"' && (exit 77)], 1)
+
 # Executing the static fprogram might be interactive on MSYS.
 AT_KEYWORDS([interactive])
 
@@ -326,6 +329,9 @@ then
   AT_CHECK([echo "$LDFLAGS" | $EGREP 'fsanitize=' && (exit 77)], 1)
 fi
 
+# Skip Fortran tests for MSVC toolchain
+AT_CHECK([$LIBTOOL --config | $EGREP '^nm_interface="MS dumpbin"' && (exit 77)], 1)
+
 _LT_SETUP
 
 LT_AT_CHECK_CONFIG([--disable-static],
@@ -349,6 +355,9 @@ then
   AT_CHECK([echo "$LDFLAGS" | $EGREP 'fsanitize=' && (exit 77)], 1)
 fi
 
+# Skip Fortran tests for MSVC toolchain
+AT_CHECK([$LIBTOOL --config | $EGREP '^nm_interface="MS dumpbin"' && (exit 77)], 1)
+
 _LT_SETUP
 
 LT_AT_CHECK_CONFIG([],
diff --git a/tests/fcdemo.at b/tests/fcdemo.at
index 80fe2482..9d934045 100644
--- a/tests/fcdemo.at
+++ b/tests/fcdemo.at
@@ -314,6 +314,9 @@ then
   AT_CHECK([echo "$LDFLAGS" | $EGREP 'fsanitize=' && (exit 77)], 1)
 fi
 
+# Skip Fortran tests for MSVC toolchain
+AT_CHECK([$LIBTOOL --config | $EGREP '^nm_interface="MS dumpbin"' && (exit 77)], 1)
+
 # Executing the static fprogram might be interactive on MSYS.
 AT_KEYWORDS([interactive])
 
@@ -340,6 +343,9 @@ then
   AT_CHECK([echo "$LDFLAGS" | $EGREP 'fsanitize=' && (exit 77)], 1)
 fi
 
+# Skip Fortran tests for MSVC toolchain
+AT_CHECK([$LIBTOOL --config | $EGREP '^nm_interface="MS dumpbin"' && (exit 77)], 1)
+
 _LT_SETUP
 
 LT_AT_CHECK_CONFIG([--disable-static],
@@ -363,6 +369,9 @@ then
   AT_CHECK([echo "$LDFLAGS" | $EGREP 'fsanitize=' && (exit 77)], 1)
 fi
 
+# Skip Fortran tests for MSVC toolchain
+AT_CHECK([$LIBTOOL --config | $EGREP '^nm_interface="MS dumpbin"' && (exit 77)], 1)
+
 _LT_SETUP
 
 LT_AT_CHECK_CONFIG([],
diff --git a/tests/lt_dlexit.at b/tests/lt_dlexit.at
index f2b4e2f7..1bbb73db 100644
--- a/tests/lt_dlexit.at
+++ b/tests/lt_dlexit.at
@@ -115,8 +115,12 @@ AT_DATA([b1.c],
 [[#ifdef __cplusplus
 extern "C" {
 #endif
-#if defined DLL_EXPORT && defined _WIN32 && defined _MSC_VER
-#  define LIBA1_SCOPE extern __declspec (dllimport)
+#if defined DLL_EXPORT
+#  if defined __CYGWIN__ || defined _WIN32 || defined WIN32
+#    if defined _MSC_VER
+#      define LIBA1_SCOPE extern __declspec (dllimport)
+#    endif
+#  endif
 #endif
 #if !defined LIBA1_SCOPE
 #  define LIBA1_SCOPE extern
diff --git a/tests/tagdemo.at b/tests/tagdemo.at
index 404ca5e8..c31ba61e 100644
--- a/tests/tagdemo.at
+++ b/tests/tagdemo.at
@@ -42,27 +42,25 @@ AC_PROG_CC_C_O
 AC_PROG_CXX
 AC_PROG_CXXCPP
 
-# Check for namespace support and new-style headers
 AC_LANG_PUSH([C++])
-AC_MSG_CHECKING([whether the compiler implements namespaces])
-AC_COMPILE_IFELSE(
-    [AC_LANG_PROGRAM([[namespace A { namespace B { int i = 0; }}]],
-		     [[using namespace A::B; return i;]])],
-    [AC_MSG_RESULT([yes])
-     AC_DEFINE([HAVE_NAMESPACES],[1],
-	       [define if the compiler implements namespaces])],
-    [AC_MSG_RESULT([no])])
 
 AC_MSG_CHECKING([whether the compiler has ISO C++ iostream])
 AC_COMPILE_IFELSE(
     [AC_LANG_PROGRAM([[#include <iostream>
-#ifdef HAVE_NAMESPACES
-using namespace std;
-#endif ]], [[cout << "bingo\n"; return 0;]])],
+ ]], [[std::cout << "bingo\n"; return 0;]])],
     [AC_MSG_RESULT([yes])
      AC_DEFINE([HAVE_IOSTREAM],[1],
 	       [define if the compiler has ISO C++ iostream])],
     [AC_MSG_RESULT([no])])
+
+AC_MSG_CHECKING([whether the compiler has iostream.h])
+AC_COMPILE_IFELSE(
+    [AC_LANG_PROGRAM([[#include <iostream.h>
+ ]], [[std::cout << "bingo\n"; return 0;]])],
+    [AC_MSG_RESULT([yes])
+     AC_DEFINE([HAVE_IOSTREAM_H],[1],
+	       [define if the compiler has iostream.h])],
+    [AC_MSG_RESULT([no])])
 AC_LANG_POP([C++])
 
 AC_LANG([C++])
@@ -109,7 +107,7 @@ AT_DATA([main.cpp],
 [[#include <config.h>
 #if HAVE_IOSTREAM
 # include <iostream>
-#else
+#elif HAVE_IOSTREAM_H
 # include <iostream.h>
 #endif
 
@@ -117,14 +115,9 @@ AT_DATA([main.cpp],
 #include "baz.h"
 #include "conv.h"
 
-#if HAVE_NAMESPACES
-namespace std { }
-using namespace std;
-#endif
-
 int main (int, char *[])
 {
-  cout << "Welcome to GNU libtool tagdemo C++!" << endl;
+  std::cout << "Welcome to GNU libtool tagdemo C++!" << std::endl;
 
   foobar_derived FB;
   // Instantiate the derived class.
@@ -134,12 +127,12 @@ int main (int, char *[])
 
   int value = fb->hello();
 
-  cout << "foobar::hello returned: " << value << endl;
+  std::cout << "foobar::hello returned: " << value << std::endl;
   if (value = HELLO_RET)
-    cout << "foobar::hello is ok!" << endl;
+    std::cout << "foobar::hello is ok!" << std::endl;
 
   if (fb->foo() == FOO_RET)
-    cout << "foobar::foo is ok!" << endl;
+    std::cout << "foobar::foo is ok!" << std::endl;
 
   // --------------
 
@@ -152,12 +145,12 @@ int main (int, char *[])
   // barbaz_derived::baz() should return FOO_RET since it calls
   // foobar_derived::foo(), which in turn calls ::foo().
   if (bb->baz() == FOO_RET)
-    cout << "barbaz::baz is ok!" << endl;
+    std::cout << "barbaz::baz is ok!" << std::endl;
 
   // --------------
 
   if (convenience())
-    cout << "convenience is ok!" << endl;
+    std::cout << "convenience is ok!" << std::endl;
 
   return 0;
 }
@@ -203,15 +196,10 @@ AT_DATA([foo.cpp],
 [[#include <config.h>
 #ifdef HAVE_IOSTREAM
 # include <iostream>
-#else
+#elifdef HAVE_IOSTREAM_H
 # include <iostream.h>
 #endif
 
-#ifdef HAVE_NAMESPACES
-namespace std { }
-using namespace std;
-#endif
-
 #include <math.h>
 
 #include "foo.h"
@@ -220,14 +208,14 @@ using namespace std;
 int
 foo(void)
 {
-  cout << "cos (0.0) = " << (double) cos ((double) 0.0) << endl;
+  std::cout << "cos (0.0) = " << (double) cos ((double) 0.0) << std::endl;
   return FOO_RET;
 }
 
 int
 hello(void)
 {
-  cout << "** This is libfoo (tagdemo) **" << endl;
+  std::cout << "** This is libfoo (tagdemo) **" << std::endl;
   return HELLO_RET;
 }
 
diff --git a/tests/template.at b/tests/template.at
index 38c44c72..9d859db7 100644
--- a/tests/template.at
+++ b/tests/template.at
@@ -74,6 +74,10 @@ int main()
 }
 ]])
 
+$ECHO "DEBUG: OBJEXT=$OBJEXT"
+OBJEXT=obj
+$ECHO "DEBUG: OBJEXT=$OBJEXT"
+
 AT_CHECK([$LIBTOOL --tag=CXX --mode=compile $CXX -I. $CPPFLAGS $CXXFLAGS -c -o alib.lo alib.cpp],
 	 [0], [ignore], [ignore])
 AT_CHECK([$LIBTOOL --tag=CXX --mode=compile $CXX -I. $CPPFLAGS $CXXFLAGS -c -o aclib.lo aclib.cpp],
diff --git a/tests/testsuite.at b/tests/testsuite.at
index bacc72ce..defde75e 100644
--- a/tests/testsuite.at
+++ b/tests/testsuite.at
@@ -72,6 +72,11 @@ unset MFLAGS MAKEFLAGS MAKELEVEL __MKLVL__ MAKE_JOBS_FIFO
 case $host_os in
 aix*) umask o-rwx ;;
 esac
+
+# Use mklink when symlinking for MSVC
+if $LIBTOOL --config | $EGREP '^nm_interface="MS dumpbin"' >/dev/null; then
+LN_S="cmd /c mklink"
+fi
 m4_divert_pop([PREPARE_TESTS])dnl
 
 
--
2.45.2

